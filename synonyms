'''Semantic Similarity

Author: Aahan Madhok and Yahya Ahmed.
'''

import math
import re


def norm(vec):
    '''Return the norm of a vector stored as a dictionary, as
    described in the handout for Project 3.
    '''

    sum_of_squares = 0.0
    for x in vec:
        sum_of_squares += vec[x] * vec[x]

    return math.sqrt(sum_of_squares)


def cosine_similarity(vec1, vec2):
    sum_of_squares_1 = 0.0
    sum_of_squares_2 = 0.0
    dot_prod = 0.0

    for x in vec1:
        sum_of_squares_1 += vec1[x] * vec1[x]
    sqrt_1 = math.sqrt(sum_of_squares_1)

    for y in vec2:
        sum_of_squares_2 += vec2[y] * vec2[y]
    sqrt_2 = math.sqrt(sum_of_squares_2)

    for key1, value1 in vec1.items():
        if key1 in vec2:
            value2 = vec2[key1]
            dot_prod += value1 * value2

    if sqrt_1 == 0 or sqrt_2 == 0:
        return 0

    return dot_prod / (sqrt_1 * sqrt_2)


def build_semantic_descriptors(sentences):
    semantic_descriptors = {}

    for sentence in sentences:
        unique_words = set(sentence)

        for key_word in unique_words:
            if key_word not in semantic_descriptors:
                semantic_descriptors[key_word] = {}

            for other_word in unique_words:
                if other_word != key_word:
                    semantic_descriptors[key_word][other_word] = semantic_descriptors[key_word].get(other_word, 0) + 1

    return semantic_descriptors



def build_semantic_descriptors_from_files(filenames):
    semantic_descriptors = {}

    for filename in filenames:
        with open(filename, "r", encoding="latin1") as file:
            content = file.read()
            sentences = re.split(r"[.!?]", content)  # Split content into sentences
            sentences = [sentence.strip() for sentence in sentences if sentence.strip()]

            for sentence in sentences:
                words = sentence.split()

                # Convert all words to lowercase
                words = [word.lower() for word in words]

                for i, key_word in enumerate(words):
                    if key_word not in semantic_descriptors:
                        semantic_descriptors[key_word] = {}

                    # Update semantic descriptor based on context words in the same sentence
                    other_words = words[:i] + words[i + 1:]
                    other_words = [other_word.lower() for other_word in other_words]
                    for other_word in other_words:
                        semantic_descriptors[key_word][other_word] = semantic_descriptors[key_word].get(other_word, 0) + 1

    return semantic_descriptors


def most_similar_word(word, choices, semantic_descriptors, similarity_fn):
    word_descriptor = semantic_descriptors.get(word, {})
    best_choice = None
    max_similarity = -1

    for choice in choices:
        choice_descriptor = semantic_descriptors.get(choice, {})
        similarity = similarity_fn(word_descriptor, choice_descriptor)

        if similarity > max_similarity or (similarity == max_similarity and choice < best_choice):
            best_choice = choice
            max_similarity = similarity

    return best_choice


def run_similarity_test(filename, semantic_descriptors, similarity_fn):
    with open(filename, 'r') as file:
        lines = file.readlines()

    correct_count = 0
    total_count = len(lines)

    for line in lines:
        parts = line.strip().split()
        word, correct_answer, choices = parts[0], parts[1], parts[2:]
        word = word.lower()
        choices = [choice.lower() for choice in choices]
        choices = [subword if "'" not in subword else subword.split("'") for subword in choices]  # Split words with apostrophes
        guessed_answer = most_similar_word(word, choices, semantic_descriptors, similarity_fn)

        if guessed_answer == correct_answer:
            correct_count += 1

    accuracy_percentage = (correct_count / total_count) * 100.0
    return accuracy_percentage



sem_descriptors = build_semantic_descriptors_from_files(["wp.txt", "sw.txt"])
res = run_similarity_test("test.txt", sem_descriptors, cosine_similarity)
print(res, "of the guesses were correct")
