'''Semantic Similarity

Author: Aahan Madhok and Yahya Ahmed.
'''

import math


def norm(vec):
    '''Return the norm of a vector stored as a dictionary, as
    described in the handout for Project 3.
    '''

    sum_of_squares = 0.0
    for x in vec:
        sum_of_squares += vec[x] * vec[x]

    return math.sqrt(sum_of_squares)


def cosine_similarity(vec1, vec2):
    sum_of_squares_1 = 0.0
    sum_of_squares_2 = 0.0
    dot_prod = 0.0

    for x in vec1:
        sum_of_squares_1 += vec1[x] * vec1[x]
    sqrt_1 = math.sqrt(sum_of_squares_1)

    for y in vec2:
        sum_of_squares_2 += vec2[y] * vec2[y]
    sqrt_2 = math.sqrt(sum_of_squares_2)

    for key1, value1 in vec1.items():
        if key1 in vec2:
            value2 = vec2[key1]
            dot_prod += value1 * value2

    return dot_prod / (sqrt_1 * sqrt_2)


def build_semantic_descriptors(sentences):
    semantic_descriptors = {} #Creates a dictionary of all words

    for sentence in range (len(sentences)): ##scrolls through each
        unique_words  = set(sentences[sentence])

        for word in unique_words: ##goes through each word in the unique_word set
            if word not in semantic_descriptors.keys():
                semantic_descriptors[word] = {} #makes a new empty dictionary in the dictionary

    ### Now is the Dictionary within dictionaries

    dictionary_words = semantic_descriptors.keys() #list of all keys

    for key_word in dictionary_words: #Cycles through all the dictionary keys

        for sentence_index in range(len(sentences)):

            if key_word in sentences[sentence_index]: #if the dictionary word is in the sentence

                for word_index in sentences[sentence_index]:

                    if word_index != key_word: #checks if the current selected word is the key_word, as we dont want to make                           a value for "man" if the dictionary is "man {}"

                        if semantic_descriptors[key_word][word_index] >= 1:
                            semantic_descriptors[key_word][word_index] += 1 # adds a count of one

                        else:
                            semantic_descriptors[key_word][word_index] = 1 #otherwise, due to an empty dictionary, we need to initilaize a value. 

def build_semantic_descriptors_from_files(filenames):
    pass



def most_similar_word(word, choices, semantic_descriptors, similarity_fn):
    pass


def run_similarity_test(filename, semantic_descriptors, similarity_fn):
    pass


print(cosine_similarity({"a": 1, "b": 2, "c": 3}, {"b": 4, "c": 5, "d": 6}))
